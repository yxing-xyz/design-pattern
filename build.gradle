allprojects {
    // JVM 版本号要求
    // java编译的时候缺省状态下会因为中文字符而失败
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        jcenter()
        mavenCentral()
    }
}

subprojects {
    group 'com.yuxing1994.template'
    //定义版本号
    version = '1.0-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    //apply plugin: 'eclipse'

    ext {
        junitVersion = '4.12'
        log4jVersion = '1.2.17'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version, "provider": 'gradle'
        }
    }

    dependencies {
        // 通用依赖
        compile(
                "log4j:log4j:${log4jVersion}"
        )
        // 依赖maven中不存在的jar
        ext.jarTree = fileTree(dir: 'lib', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'lib').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
        compile jarTree

        //runtime()

        // 测试依赖
        testCompile(
                "junit:junit:${junitVersion}"
        )
        //testRuntime()
    }
    task jarWithoutResources(type: Jar) {
        baseName project.name
        from("$buildDir/classes/main")
    }

    task listJar(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

    task jarPath << {
        println(libsDir);
        configurations.runtime.resolve().each {
            print it.toString() + "\n"
        }
    }

    def creatDir = {
        path ->
            File dir = new File(path);
            if (!dir.exists()) {
                dir.mkdirs();
            }
    }

    task makeJavaDir() {
        def paths = [
                "$projectDir/src/main/assembly", "$projectDir/src/main/bin", "$projectDir/src/main/config",
                "$projectDir/src/main/filters", "$projectDir/src/main/java", "$projectDir/src/main/resources",
                "$projectDir/src/test/resources", "$projectDir/src/test/java", "$projectDir/src/test/filters"
        ]
        doFirst {
            paths.forEach(creatDir);
        }
    }

    task makeWebDir() {
        dependsOn 'makeJavaDir'
        def paths = [
                "$projectDir/src/main/webapp/WEB-INF/lib", "$projectDir/src/main/webapp/WEB-INF/classes"
        ]
        doLast {
            paths.forEach(creatDir);
        }

    }

    task createJavaProject << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs()}
    }

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        def libDir = webAppDir/WEB-INF
        webAppDir.mkdirs()
        libDir.mkdirs()
    }
}
