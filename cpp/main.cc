#include <iostream>
#include <fstream>

int main(int argc, char *argv[])
{
    return 0;
}


/* 类图关系:

   泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖

   1. 泛化(Generalization):
   形状: 带三角箭头的实线，箭头指向父类
   是一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：老虎是动物的一种.

   2. 实现(Realization):
   形状: 带三角箭头的虚线，箭头指向接口
   是一种类与接口的关系，表示类是接口所有特征和行为的实现

   3. 关联(Association):
   形状: 带普通箭头的实心线，指向被拥有者
   是一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。
   代码: 丈夫和妻子成员变量互相拥有对方

   4. 聚合(Aggregation):
   形状: 带空心菱形的实心线，菱形指向整体
   是整体与部分的关系.如车和轮胎是整体和部分的关系.聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。
   代码: 车的成员变量List<轮胎>

   5. 组合(Composition):
   形状: 带实心菱形的实线，菱形指向整体
   是整体与部分的关系.没有公司就不存在部门,组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期
   代码: 鸟的成员变量翅膀

   6. 依赖(Dependency)
   形状: 带箭头的虚线，指向被使用者
   是一种使用的关系,所以要尽量不使用双向的互相依赖。
   代码: 局部变量、方法的参数或者对静态方法的调用

*/
